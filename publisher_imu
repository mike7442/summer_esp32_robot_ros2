#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Imu
from geometry_msgs.msg import Quaternion, Vector3
import random

class ImuTalker(Node):
    def __init__(self):
        super().__init__('imu_talker')
        self.publisher_ = self.create_publisher(Imu, 'imu_data', 10)
        timer_period = 0.1  # 10 Hz
        self.timer = self.create_timer(timer_period, self.publish_imu_data)
        
        self.imu_msg = Imu()
        self.imu_msg.header.frame_id = "imu_link"
        self.imu_msg.orientation_covariance = [0.0] * 9
        self.imu_msg.angular_velocity_covariance = [0.0] * 9
        self.imu_msg.linear_acceleration_covariance = [0.0] * 9

    def publish_imu_data(self):
        self.imu_msg.header.stamp = self.get_clock().now().to_msg()
        
        # Ориентация (кватернион)
        self.imu_msg.orientation = Quaternion(
            x=random.uniform(-0.1, 0.1),
            y=random.uniform(-0.1, 0.1),
            z=random.uniform(-0.1, 0.1),
            w=1.0
        )
        
        # Угловая скорость
        self.imu_msg.angular_velocity = Vector3(
            x=random.uniform(-0.5, 0.5),
            y=random.uniform(-0.5, 0.5),
            z=random.uniform(-0.5, 0.5)
        )  # <-- Закрывающая скобка была пропущена
        
        # Линейное ускорение
        self.imu_msg.linear_acceleration = Vector3(
            x=random.uniform(-1.0, 1.0),
            y=random.uniform(-1.0, 1.0),
            z=9.8 + random.uniform(-0.1, 0.1)
        )
        
        self.publisher_.publish(self.imu_msg)
        self.get_logger().info('Publishing IMU data', throttle_duration_sec=1.0)

def main(args=None):
    rclpy.init(args=args)
    node = ImuTalker()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
