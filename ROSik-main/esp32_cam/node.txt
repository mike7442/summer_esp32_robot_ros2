1. –ö–æ–¥ –Ω–æ–¥—ã bridge_node.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
esp32_cam_bridge ‚Ä¢ MJPEG stream ‚Üí /robotcam (sensor_msgs/Image)

ROS-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
  host         ‚Äî IP-–∞–¥—Ä–µ—Å ESP32 (default: 192.168.0.117)
  stream_path  ‚Äî URL-–ø—É—Ç—å MJPEG (default: /stream)
  topic        ‚Äî –∫—É–¥–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å (default: /robotcam)
  frame_id     ‚Äî frame_id –≤ header (default: camera)
"""

import cv2
import numpy as np
import requests
import threading
import time

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image


class ESP32CamBridge(Node):
    def __init__(self) -> None:
        super().__init__("esp32_cam_bridge")

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.declare_parameter("host", "192.168.0.117")
        self.declare_parameter("stream_path", "/stream")
        self.declare_parameter("topic", "/robotcam")
        self.declare_parameter("frame_id", "camera")

        host = self.get_parameter("host").get_parameter_value().string_value
        path = self.get_parameter("stream_path").get_parameter_value().string_value
        self.url = f"http://{host}{path}"

        topic = self.get_parameter("topic").get_parameter_value().string_value
        self.frame_id = self.get_parameter("frame_id").get_parameter_value().string_value
        self.publisher = self.create_publisher(Image, topic, 10)

        self.get_logger().info(f"MJPEG  {self.url}  ‚Üí  {topic}")

        # –ø–æ—Ç–æ–∫ —á–∏—Ç–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å rclpy.spin()
        threading.Thread(target=self._stream_loop, daemon=True).start()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _stream_loop(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, —á–∏—Ç–∞–µ—Ç –ø–æ—Ç–æ–∫, –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è."""
        while rclpy.ok():
            try:
                resp = requests.get(self.url, stream=True, timeout=(3, None))
                resp.raise_for_status()
                buf = b""

                for chunk in resp.iter_content(chunk_size=4096):
                    if not rclpy.ok():
                        return
                    if not chunk:
                        continue
                    buf += chunk
                    # –∏—â–µ–º SOI / EOI (FFD8 ‚Ä¶ FFD9)
                    while True:
                        soi = buf.find(b"\xff\xd8")
                        eoi = buf.find(b"\xff\xd9", soi + 2)
                        if soi != -1 and eoi != -1:
                            jpg = buf[soi : eoi + 2]
                            buf = buf[eoi + 2 :]
                            self._publish(jpg)
                        else:
                            break

            except Exception as e:
                self.get_logger().warn(f"Stream error: {e}  ‚Üí reconnect in 1 s")
                time.sleep(1.0)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _publish(self, jpg: bytes) -> None:
        """JPEG ‚Üí numpy ‚Üí sensor_msgs/Image."""
        img_np = np.frombuffer(jpg, dtype=np.uint8)
        frame = cv2.imdecode(img_np, cv2.IMREAD_COLOR)
        if frame is None:
            return

        msg = Image()
        msg.header.stamp = self.get_clock().now().to_msg()
        msg.header.frame_id = self.frame_id
        msg.height, msg.width, _ = frame.shape
        msg.encoding = "bgr8"
        msg.step = msg.width * 3
        msg.data = frame.tobytes()
        self.publisher.publish(msg)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main(args=None) -> None:
    rclpy.init(args=args)
    node = ESP32CamBridge()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    rclpy.shutdown()


if __name__ == "__main__":
    main()
2. –ü–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ esp32_cam_bridge
üëá –ö–æ–º–∞–Ω–¥—ã –¥–ª—è bash (Linux / WSL).
–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è/–ø—Ä–æ–∏–∑–æ–π—Ç–∏.

–®–∞–≥ 1. –†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
cd ~
mkdir -p ros2_ws/src
cd ros2_ws/src
–®–∞–≥ 2. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ ROS 2
source /opt/ros/jazzy/setup.bash        # Humble/Iron ‚Äì –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
echo "source /opt/ros/jazzy/setup.bash" >> ~/.bashrc
–®–∞–≥ 3. –°–æ–∑–¥–∞—ë–º Python-–ø–∞–∫–µ—Ç
ros2 pkg create --build-type ament_python esp32_cam_bridge
esp32_cam_bridge/
‚îú‚îÄ‚îÄ esp32_cam_bridge/      # —Å—é–¥–∞ –ø–æ–ª–æ–∂–∏–º –Ω–æ–¥—É
‚îÇ   ‚îî‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ package.xml
‚îú‚îÄ‚îÄ setup.cfg
‚îú‚îÄ‚îÄ setup.py
‚îî‚îÄ‚îÄ resource/‚Ä¶
–®–∞–≥ 4. –ö–ª–∞–¥—ë–º –Ω–æ–¥—É
cd ~/ros2_ws/src/esp32_cam_bridge
touch esp32_cam_bridge/bridge_node.py
chmod +x esp32_cam_bridge/bridge_node.py
nano esp32_cam_bridge/bridge_node.py     # –≤—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –∏–∑ –ø. 1
–®–∞–≥ 5. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
–í setup.py –Ω–∞–π–¥–∏—Ç–µ (–∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ) —Å–µ–∫—Ü–∏—é entry_points:

entry_points={
    'console_scripts': [
        'esp32_cam_bridge = esp32_cam_bridge.bridge_node:main',
    ],
},
–®–∞–≥ 6. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
–í package.xml –¥–æ–±–∞–≤—å—Ç–µ –≤–Ω—É—Ç—Ä–∏ <exec_depend>:

<exec_depend>rclpy</exec_depend>
<exec_depend>sensor_msgs</exec_depend>
(–û—Ç cv_bridge –º–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è: –º—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.)

–®–∞–≥ 7. –í–Ω–µ—à–Ω–∏–µ Python-–±–∏–±–ª–∏–æ—Ç–µ–∫–∏
# –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π Python ROS-–¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
pip3 install requests opencv-python numpy --break-system-packages
–®–∞–≥ 8. –°–±–æ—Ä–∫–∞
cd ~/ros2_ws
colcon build
–®–∞–≥ 9. –°–æ—Ä—Å–∏–Ω–≥ –æ–∫—Ä—É–∂–µ–Ω–∏—è
source install/setup.bash
echo "source ~/ros2_ws/install/setup.bash" >> ~/.bashrc
–®–∞–≥ 10. –ó–∞–ø—É—Å–∫
ros2 run esp32_cam_bridge esp32_cam_bridge
–í –ª–æ–≥–µ –ø–æ—è–≤–∏—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:

[MJPEG  http://192.168.0.117/stream  ‚Üí  /robotcam]
3. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –ª–µ—Ç—É
ros2 run esp32_cam_bridge esp32_cam_bridge \
  --ros-args -p host:=192.168.0.42 \
             -p topic:=/front_camera \
             -p frame_id:=front_cam