#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Imu
from geometry_msgs.msg import Vector3
import socket
import struct

class ImuPublisher(Node):
    def __init__(self):
        super().__init__('imu_publisher')
        self.publisher_ = self.create_publisher(Imu, 'imu/data', 10)
        
        # Настройка подключения к TCP-серверу IMU
        self.last_digit = 102  # Измените на нужный IP
        self.host = f"192.168.0.{self.last_digit}"
        self.port = 12345
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        
        # Инициализация сообщения IMU
        self.imu_msg = Imu()
        self.imu_msg.header.frame_id = "imu_link"
        self.imu_msg.orientation_covariance[0] = -1  # Нет данных об ориентации
        self.imu_msg.angular_velocity_covariance = [0.0] * 9
        self.imu_msg.linear_acceleration_covariance = [0.0] * 9
        
        # Подключение и запуск таймера
        self.connect_to_imu()
        self.timer = self.create_timer(0.01, self.read_and_publish)  # 100 Hz

    def connect_to_imu(self):
        try:
            self.sock.connect((self.host, self.port))
            self.get_logger().info(f"Connected to IMU at {self.host}:{self.port}")
        except Exception as e:
            self.get_logger().error(f"Connection failed: {e}")

    def unpack6BytesToFloats(self, bytes_data):
        """Распаковка 6 float значений из байтового потока"""
        return struct.unpack('<6f', bytes_data)

    def read_and_publish(self):
        try:
            data = self.sock.recv(24)  # 6 float × 4 bytes = 24 bytes
            if len(data) != 24:
                if not data:
                    self.get_logger().error("Connection closed by IMU")
                    self.sock.close()
                    return
                return
            
            # Распаковка данных
            values = self.unpack6BytesToFloats(data)
            
            # Заполнение сообщения (gyro_x, gyro_y, gyro_z, accel_x, accel_y, accel_z)
            self.imu_msg.header.stamp = self.get_clock().now().to_msg()
            self.imu_msg.angular_velocity = Vector3(
                x=values[0],
                y=values[1],
                z=values[2]
            )
            self.imu_msg.linear_acceleration = Vector3(
                x=values[3],
                y=values[4],
                z=values[5]
            )
            
            self.publisher_.publish(self.imu_msg)
            self.get_logger().info('IMU data published', throttle_duration_sec=1.0)
            
        except Exception as e:
            self.get_logger().error(f"Error: {e}")
            self.sock.close()

    def __del__(self):
        if hasattr(self, 'sock'):
            self.sock.close()

def main(args=None):
    rclpy.init(args=args)
    node = ImuPublisher()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
