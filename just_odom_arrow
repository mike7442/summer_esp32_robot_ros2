#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Pose, Twist, Vector3, Quaternion

class ImuOdometry(Node):
    def __init__(self):
        super().__init__('imu_odometry')
        
        self.publisher = self.create_publisher(Odometry, '/odometry/raw', 10)
        self.timer = self.create_timer(0.1, self.publish_odom)
        
        # Явное создание объектов ROS-сообщений
        self.position = Vector3()
        self.position.x = 0.0
        self.position.y = 0.0
        self.position.z = 0.0
        
        self.orientation = Quaternion()
        self.orientation.w = 1.0

    def publish_odom(self):
        # Обновление позиции
        self.position.x += 0.01
        
        # Создание сообщения Odometry
        odom = Odometry()
        odom.header.stamp = self.get_clock().now().to_msg()
        odom.header.frame_id = 'odom'
        odom.child_frame_id = 'base_link'
        
        # Заполнение данных
        odom.pose.pose.position = self.position
        odom.pose.pose.orientation = self.orientation
        
        # Публикация
        self.publisher.publish(odom)
        self.get_logger().info('Publishing odometry', throttle_duration_sec=1.0)

def main(args=None):
    rclpy.init(args=args)
    node = ImuOdometry()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
